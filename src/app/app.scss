// @font-face{
// font-family: 'Fjalla One';
// src: url('../assets/fonts/fjallaone.woff2') format('woff2');
// }
//  @font-face {
//   font-family: 'Montserrat';
//   font-style: normal;
//   font-weight: 400;
//   src: local('Montserrat Regular'), local('Montserrat-Regular'), url(https://fonts.gstatic.com/s/montserrat/v10/gFXtEMCp1m_YzxsBpKl68iEAvth_LlrfE80CYdSH47w.woff2) format('woff2');
//   unicode-range: U+0100-024F, U+1E00-1EFF, U+20A0-20AB, U+20AD-20CF, U+2C60-2C7F, U+A720-A7FF;
// }

@font-face {
  font-family: 'Pangolin';
  font-style: normal;
  font-weight: 200;
  src: url('../assets/fonts/pangolin.woff2') format('woff2');
}
*{
font-family: 'Pangolin';
}

ion-menu{
  
    ion-header {
        display: block;
        background: url('../assets/images/bmfa.jpg');
        overflow: hidden;
        color: white;
        ion-item{
            background-color:rgba(0,0,0,.6) !important;
            color: white;
        }
    }
}

ion-content{
    background-color:rgba(224,222,225,1) !important;
}

.imondcap{
    text-transform: capitalize;
    font-size: 12px;
}
.imondp{
    color:red;
}
.imondtrans{
    background-color:rgba(36,42,49,0.8) !important;
}

.trans {
    background-color: rgba(0,0,0,0);
    color:#242A31;
}

.hide-card {
  -webkit-box-shadow: none!important;
}

.cta {
    background: rgba(255, 255, 255, 0.2);
    border-radius: 100px;
}

.imond {
    background: rgba(0, 0, 0, 0.2);
}
.custom-avatar {
  height: 30vw;
  width: 30vw;
  border: 1px solid #fff;
  border-radius: 50%;
  display: inline-block;
  margin-left: auto;
  margin-right: auto;
}

.imondwhite{
    color:white;
}

// Media of at most the maximum breakpoint width. No query for the largest breakpoint.
// Makes the @content apply to the given breakpoint and narrower.
@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {
  $max: breakpoint-max($name, $breakpoints);
  @if $max {
    @media (max-width: $max) {
      @content;
    }
  } @else {
    @content;
  }
}


// Name of the next breakpoint, or null for the last breakpoint.
//
//    >> breakpoint-next(sm)
//    md
//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    md
//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))
//    md
@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {
  $n: index($breakpoint-names, $name);
  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);
}


// Maximum breakpoint width. Null for the largest (last) breakpoint.
// The maximum value is calculated as the minimum of the next one less 0.1.
//
//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    767px
@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {
  $next: breakpoint-next($name, $breakpoints);
  @return if($next, breakpoint-min($next, $breakpoints) - 1px, null);
}


// Creates text alignment classes based on screen size
// TODO this would be nice to add to the framework
@each $breakpoint in map-keys($grid-breakpoints) {
  $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

  @include media-breakpoint-up($breakpoint, $grid-breakpoints) {
    // Provide text `[text-{bp}]` attributes for aligning text based on screen size
    [text#{$infix}-center] {
      text-align: center;
    }

    [text#{$infix}-left] {
      text-align: left;
    }

    [text#{$infix}-right] {
      text-align: right;
    }

    [hidden#{$infix}-up] {
      display: none;
    }
  }

  @include media-breakpoint-down($breakpoint, $grid-breakpoints) {
    [hidden#{$infix}-down] {
      display: none;
    }
  }
}
